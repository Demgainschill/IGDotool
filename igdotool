#!/bin/bash

## igdotool will extract links from saved posts but these requirements are a must. and as follows 
## Browser must be a 1920x1080p resolution screen 
## Screen zoom must be defaulted to 67%
## User must be signed in already
## User must already be on the all-saved page and have the screen zoom at 67%

declare -i maxnoposts
#default filename defaults to "iglinks" can be changed 
filename="iglinks"
declare -i tasks

b=$(tput setaf 4)
r=$(tput setaf 1)
g=$(tput setaf 10)
y=$(tput setaf 3)
reset=$(tput sgr0)
c=$(tput setaf 14)
o=$(tput setaf 208) 

igxclipping(){	

maxnoposts="${1}"
	xdotool keydown Alt key Tab keyup Alt
	xdotool mousemove 855 335
	sleep 0.5
	xdotool click 1
	sleep 0.5
	xdotool mousemove 1358 185
	sleep 0.5
	xdotool click 1
	sleep 0.5
	xdotool mousemove 957 610
	sleep 0.5
	xdotool click 1
	sleep 0.5
	xdotool keydown Alt key Tab keyup Alt
	xclip -selection clipboard -o >> iglinks && echo >> iglinks
	sleep 0.5
	xdotool keydown Alt key Tab keyup Alt
## start with a loop 
	eval "for i in {1..$maxnoposts}; do
		xdotool mousemove 1896 606
		xdotool click 1
		sleep 0.5 
		xdotool mousemove 855 335
		sleep 0.5
		xdotool click 1
		sleep 0.5
		xdotool mousemove 1358 185
		sleep 0.5
		xdotool click 1
		sleep 0.5
		xdotool mousemove 957 610
		sleep 0.5
		xdotool click 1
		sleep 0.5
		xdotool keydown Alt key Tab keyup Alt
		xclip -selection clipboard -o >> iglinks && echo >> iglinks
		sleep 0.5
		xdotool keydown Alt key Tab keyup Alt
	done
		xdotool keydown Alt key Tab keyup Alt"
		echo "${g}completed copying all links${reset}"
}

usage(){
	cat << EOF
${c}▗▄▄▄▖ ▗▄▄▖▗▄▄▄  ▗▄▖▗▄▄▄▖▗▄▖  ▗▄▖ ▗▖   ${reset}
${c}  █  ▐▌   ▐▌  █▐▌ ▐▌ █ ▐▌ ▐▌▐▌ ▐▌▐▌   ${reset}
${c}  █  ▐▌▝▜▌▐▌  █▐▌ ▐▌ █ ▐▌ ▐▌▐▌ ▐▌▐▌   ${reset}
${c}▗▄█▄▖▝▚▄▞▘▐▙▄▄▀▝▚▄▞▘ █ ▝▚▄▞▘▝▚▄▞▘▐▙▄▄▖${reset}
${c}                                      ${reset}
	
	${r}IMPORTANT!!${reset}: ${y}Read and setup according to the readme.md file first and have it work flawlessly.${reset}

		${b}Usage${reset}: ./${g}igdotool${reset} [${y}-n${reset}|${y}-x${reset}|${y}-h${reset}] [${b}int${reset}]

	${y}-n${reset} [${b}int${reset}] : ${c}Number of posts to copy links from ${reset}( ${y} Value of ${reset}[${b}int${reset}] ${y}being the number of posts to automate copying to clipboard ${reset} ${reset} )
	${y}-x${reset} [${b}int${reset}] : ${c}Extracting posts from iglinks file using xargs and yt-dlp${reset} ([${b}int${reset}] ${c}being higher parallel tasks faster downloads max 64 parallel tasks/threads downloading ${reset} (${b} Can be determined using the ${g}nproc${reset}${b} command ${reset})${reset})
	${y}-h${reset} 	 :${c} Displaying usage section of igdotool${reset}

A quick example supposing your alt+tab window is an active browser page of all ig saved posts with ${y}67%${reset} zoom

	${r}Run${reset} ./${g}igdotool${reset} ${y}-n${reset} ${b}5${reset} ( ${y}will automate copying of the 5 posts in a row to a file in the CWD ${reset})
${b}then${reset}, 	${r}Run${reset} ./${g}igdotool${reset} ${y}-x${reset} ${b}8${reset} ( ${y}will then start downloading all links found from the file containing links with parallel tasks allowing for faster parallel downloads and the actual use of multithreaded systems downloaded within the same CWD ${reset})

${g}For the Community. Enjoy!!!${reset}
${b}~~ @Demgainschill ~~${reset}
EOF
}

extractor(){
	filename="$1"
	tasks="$2"
	if [[ -n $(which yt-dlp) ]]; then 
		echo "${g}wget installed${reset}" 
	else
		apt-get install yt-dlp
		if [[ $? -eq 0 ]];
		then 
			echo "${g}wget installed successfully${reset}"
		else
			echo "${r}errors encountered while installing yt-dlp${reset}"
			echo "${r}Manually install yt-dlp and rerun command${reset}"
			exit 1
		fi
	fi
	
	if [[ -n $(which xargs) ]];then
		echo "${g}xargs exists${reset}"
	else
		echo "${y}installing xargs${reset}"
		apt-get install xargs 
		if [[ $? -eq 0 ]];then
			"${g}xargs installed successfully${reset}"
		else
			echo "${r}encountered problems downloading xargs${reset}"
			echo "${r}xargs not found can be downloaded from findutils package manually${reset}"
			exit 1
		fi
	fi
	
       	if [[ -f $filename ]] && [[ -n $filename ]]; then 
		echo "${g}$filename exists and contains links${reset}"
		echo "${y}extracting and downloading links parallely.${reset}(${y} Holy grail of multithreaded systems..${reset})"
		cat $filename | xargs -n 1 -I {} -P $tasks yt-dlp {}
		if [[ $? -eq 0 ]]; then
			echo "${g}all ig posts have been extracted and downloaded${reset}"
		else
			echo "${r}Errors encountered while extracting...${reset}"
			echo "${r}Exiting...${reset}" 
			exit 1
		fi
	else
		echo "${r}file does not exist${reset}"
		echo "${y}Please run igdotool with -n [int] and also modify default filename param ${reset}"
		echo "${r}Exiting.... see -h for usage${reset}"
		exit 1
	fi
		
}	
while getopts ":hn:x:" OPTS; do
	case "$OPTS" in
		n)
			maxnoposts="${OPTARG}"
			if echo $maxnoposts | grep -Ei '^[0-9]+$'; then 
				echo "${g}Number of posts to download $maxnoposts ${reset}" 
				igxclipping "$maxnoposts"
			else
				echo "${r}$maxnoposts is not an integer exiting...${reset}"
				exit 1
			fi	
			
			;;
		h)
			usage
			;;
			
		x)
			if [[ -f "$filename" ]] && [[ -n "$filename" ]]; then
				tasks=${OPTARG}
				echo "${g}file exists${reset}"
				echo "${g}Proceeding with extracting of links from $filename ${reset}"
					
				if [[ -n $tasks ]]; then
					extractor "$filename" "$tasks"
				else
					echo "${r}$tasks is not a valid integer${reset}"
				fi
			else
				echo "${r}File not found run the tool with -n [int] option first${reset}"
				exit 1
				fi

			
			;;
		\?)
			echo "${r}Invalid option${reset}"
			usage
			exit 1
			;;
		:)
			echo "${r}Requires argument [int]${reset}"
			usage
			exit 1
			;;
	esac
done

if [[ ! -n $1 ]]; then
	usage
	exit 1
fi

shift $((OPTIND-1))

if [[ $# -ge 1 ]]; then 
	echo "${r}Too many arguments. Exiting...${reset}"
	usage
	exit 1
fi 

